
ATmega328P_Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000006ea  0000077e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000427  00800104  00800104  00000782  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001482  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8f  00000000  00000000  00001e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b81  00000000  00000000  000028bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00003440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb2  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bc  00000000  00000000  0000437e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000493a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  9e:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Task2>:
		OS__vEndCriticalSection(u8Status);	
	}
}

void Task2 (void)
{
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <Task2>

000000a8 <Task3>:
	{
	}
}

void Task3 (void)
{
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <Task3>

000000aa <Task4>:
	{		
	}
}

void Task4 (void)
{
  aa:	ff cf       	rjmp	.-2      	; 0xaa <Task4>

000000ac <Task5>:
	while(1)
	{
	}
}
void Task5 (void)
{
  ac:	08 95       	ret

000000ae <Task6>:
} 
void Task6 (void)
{
	static uint8_t u8Previous=PBUTTON1_READPIN;
	static uint8_t u8Actual=PBUTTON1_READPIN;
	u8Actual=PBUTTON1_READPORT & PBUTTON1_READPIN;
  ae:	89 b1       	in	r24, 0x09	; 9
  b0:	84 70       	andi	r24, 0x04	; 4
  b2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <u8Actual.1986>
	
	LEDBLUE_OUT|=LEDBLUE_PIN;
  b6:	42 9a       	sbi	0x08, 2	; 8
	if(u8Previous!=u8Actual)
  b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <u8Actual.1986>
  bc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	98 17       	cp	r25, r24
  c2:	31 f0       	breq	.+12     	; 0xd0 <Task6+0x22>
	{
		if(u8Actual==0)
  c4:	81 11       	cpse	r24, r1
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <Task6+0x22>
		{
			LEDBLUE_OUT&=~LEDBLUE_PIN;
  c8:	42 98       	cbi	0x08, 2	; 8
			u8Flag=1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <u8Flag>
		}
		
	}
	u8Previous=u8Actual;
  d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <u8Actual.1986>
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d8:	08 95       	ret

000000da <Task1>:
	OS__vLaunch();
}

uint8_t u8Flag=0;
void Task1(void)
{	
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	2a 97       	sbiw	r28, 0x0a	; 10
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
	static uint16_t u16Color=0;
	uint16_t u16I=0;

	while(1)
	{
		u8Status = OS__u8StartCriticalSection();
  ee:	0e 94 46 01 	call	0x28c	; 0x28c <OS__u8StartCriticalSection>
		if(u8Flag==1)
  f2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <u8Flag>
  f6:	91 30       	cpi	r25, 0x01	; 1
  f8:	e1 f4       	brne	.+56     	; 0x132 <Task1+0x58>
		{
			
			temp[10];
  fa:	9b 85       	ldd	r25, Y+11	; 0x0b
			//ILI9163__vClear(COLORS_u16Values[u16Color]);
			if(u16Color<COLORS_MAX)
  fc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 100:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 104:	2c 38       	cpi	r18, 0x8C	; 140
 106:	31 05       	cpc	r19, r1
 108:	58 f4       	brcc	.+22     	; 0x120 <Task1+0x46>
			{
				u16Color++;
				temp[0]=u16Color++;
 10a:	a9 01       	movw	r20, r18
 10c:	4e 5f       	subi	r20, 0xFE	; 254
 10e:	5f 4f       	sbci	r21, 0xFF	; 255
 110:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <__data_end+0x1>
 114:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <__data_end>
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	29 83       	std	Y+1, r18	; 0x01
 11e:	07 c0       	rjmp	.+14     	; 0x12e <Task1+0x54>
			}
			else
			{
				
				temp[5]+=u16Color++;
 120:	9e 81       	ldd	r25, Y+6	; 0x06
 122:	29 0f       	add	r18, r25
 124:	2e 83       	std	Y+6, r18	; 0x06
				u16Color=0;
 126:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 12a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			}
			u8Flag=0;
 12e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <u8Flag>
			
		}
		OS__vEndCriticalSection(u8Status);	
 132:	0e 94 4a 01 	call	0x294	; 0x294 <OS__vEndCriticalSection>
	}
 136:	db cf       	rjmp	.-74     	; 0xee <Task1+0x14>

00000138 <main>:


int main(void)
{
	
	GPIO__vInitPort();
 138:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO__vInitPort>
	//ILI9163__vInit();
	OS__enAddPeriodicThreads(&Task5,250,&Task6,100);
 13c:	24 e6       	ldi	r18, 0x64	; 100
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	47 e5       	ldi	r20, 0x57	; 87
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	6a ef       	ldi	r22, 0xFA	; 250
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	86 e5       	ldi	r24, 0x56	; 86
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 ca 01 	call	0x394	; 0x394 <OS__enAddPeriodicThreads>
	OS__enAddMainThreads(&Task1, &Task2, &Task3, &Task4);
 150:	25 e5       	ldi	r18, 0x55	; 85
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	44 e5       	ldi	r20, 0x54	; 84
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	63 e5       	ldi	r22, 0x53	; 83
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	8d e6       	ldi	r24, 0x6D	; 109
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 09 02 	call	0x412	; 0x412 <OS__enAddMainThreads>
	OS__vLaunch();
 164:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <OS__vLaunch>
}
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret

0000016e <GPIO__vInitPort>:
}
uint8_t GPIO__u8GetCounterRisingINT0(void)
{
	return GPIO_u8CountINT0;
	
}
 16e:	85 b7       	in	r24, 0x35	; 53
 170:	8f 7e       	andi	r24, 0xEF	; 239
 172:	85 bf       	out	0x35, r24	; 53
 174:	52 98       	cbi	0x0a, 2	; 10
 176:	5a 9a       	sbi	0x0b, 2	; 11
 178:	53 98       	cbi	0x0a, 3	; 10
 17a:	5b 9a       	sbi	0x0b, 3	; 11
 17c:	54 98       	cbi	0x0a, 4	; 10
 17e:	5c 9a       	sbi	0x0b, 4	; 11
 180:	25 9a       	sbi	0x04, 5	; 4
 182:	38 9a       	sbi	0x07, 0	; 7
 184:	39 9a       	sbi	0x07, 1	; 7
 186:	3a 9a       	sbi	0x07, 2	; 7
 188:	2d 98       	cbi	0x05, 5	; 5
 18a:	40 98       	cbi	0x08, 0	; 8
 18c:	41 98       	cbi	0x08, 1	; 8
 18e:	42 98       	cbi	0x08, 2	; 8
 190:	08 95       	ret

00000192 <__vector_1>:

/*Interrupt for INT0 PD2*/
ISR(INT0_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
	GPIO_u8CountINT0++;
 19e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <GPIO_u8CountINT0>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <GPIO_u8CountINT0>
}
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_3>:

ISR(PCINT0_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
	static uint8_t u8PreviousValuePB1=(1<<PINB1);
	static uint8_t u8PreviousValuePB2=(1<<PINB2);
	
	uint8_t u8ActualValuePB1=(PINB & (1<<PINB1));
 1c4:	93 b1       	in	r25, 0x03	; 3
 1c6:	92 70       	andi	r25, 0x02	; 2
	uint8_t u8ActualValuePB2=(PINB & (1<<PINB2));
 1c8:	83 b1       	in	r24, 0x03	; 3
 1ca:	84 70       	andi	r24, 0x04	; 4
	if(u8ActualValuePB1 != u8PreviousValuePB1 )
 1cc:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <u8PreviousValuePB1.1665>
 1d0:	92 17       	cp	r25, r18
 1d2:	21 f0       	breq	.+8      	; 0x1dc <__vector_3+0x28>
	{
		if( u8ActualValuePB1==0)/*Pin change from 5v to 0v Falling edge*/
 1d4:	91 11       	cpse	r25, r1
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__vector_3+0x28>
		{
			GPIO_u8CountPCINT2=0;
 1d8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <GPIO_u8CountPCINT2>
		}
		else/*Pin change from 0v to 5v Rising edge*/
		{
		}
	}
	if(u8ActualValuePB2 != u8PreviousValuePB2 )
 1dc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <u8PreviousValuePB2.1666>
 1e0:	82 17       	cp	r24, r18
 1e2:	39 f0       	breq	.+14     	; 0x1f2 <__vector_3+0x3e>
	{
		if( u8ActualValuePB2==0)/*Pin change from 5v to 0v Falling edge*/
 1e4:	81 11       	cpse	r24, r1
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <__vector_3+0x3e>
		{
			GPIO_u8CountPCINT2++;	
 1e8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <GPIO_u8CountPCINT2>
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <GPIO_u8CountPCINT2>
		}
		else/*Pin change from 0v to 5v Rising edge*/
		{	
		}
	}
	u8PreviousValuePB1=u8ActualValuePB1;
 1f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <u8PreviousValuePB1.1665>
	u8PreviousValuePB2=u8ActualValuePB2;
 1f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <u8PreviousValuePB2.1666>
}
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <Timer0__vInit>:
{
	TIMSK0= ((uint8_t)enInterrupt&0x07);
	
}void Timer0__vDisableInterrupt(Timer0_nInterrupt enInterrupt)
{
	TIMSK0&=~((uint8_t)enInterrupt&0x07);
 20a:	95 b5       	in	r25, 0x25	; 37
 20c:	98 7f       	andi	r25, 0xF8	; 248
 20e:	95 bd       	out	0x25, r25	; 37
 210:	94 b5       	in	r25, 0x24	; 36
 212:	9c 7f       	andi	r25, 0xFC	; 252
 214:	94 bd       	out	0x24, r25	; 36
 216:	95 b5       	in	r25, 0x25	; 37
 218:	97 7f       	andi	r25, 0xF7	; 247
 21a:	95 bd       	out	0x25, r25	; 37
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	a1 f0       	breq	.+40     	; 0x248 <Timer0__vInit+0x3e>
 220:	28 f4       	brcc	.+10     	; 0x22c <Timer0__vInit+0x22>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	41 f0       	breq	.+16     	; 0x236 <Timer0__vInit+0x2c>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	51 f0       	breq	.+20     	; 0x23e <Timer0__vInit+0x34>
 22a:	20 c0       	rjmp	.+64     	; 0x26c <Timer0__vInit+0x62>
 22c:	85 30       	cpi	r24, 0x05	; 5
 22e:	81 f0       	breq	.+32     	; 0x250 <Timer0__vInit+0x46>
 230:	87 30       	cpi	r24, 0x07	; 7
 232:	a9 f0       	breq	.+42     	; 0x25e <Timer0__vInit+0x54>
 234:	1b c0       	rjmp	.+54     	; 0x26c <Timer0__vInit+0x62>
 236:	84 b5       	in	r24, 0x24	; 36
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	84 bd       	out	0x24, r24	; 36
 23c:	17 c0       	rjmp	.+46     	; 0x26c <Timer0__vInit+0x62>
 23e:	84 b5       	in	r24, 0x24	; 36
 240:	82 60       	ori	r24, 0x02	; 2
 242:	84 bd       	out	0x24, r24	; 36
 244:	47 bd       	out	0x27, r20	; 39
 246:	12 c0       	rjmp	.+36     	; 0x26c <Timer0__vInit+0x62>
 248:	84 b5       	in	r24, 0x24	; 36
 24a:	83 60       	ori	r24, 0x03	; 3
 24c:	84 bd       	out	0x24, r24	; 36
 24e:	0e c0       	rjmp	.+28     	; 0x26c <Timer0__vInit+0x62>
 250:	84 b5       	in	r24, 0x24	; 36
 252:	81 60       	ori	r24, 0x01	; 1
 254:	84 bd       	out	0x24, r24	; 36
 256:	85 b5       	in	r24, 0x25	; 37
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	85 bd       	out	0x25, r24	; 37
 25c:	47 bd       	out	0x27, r20	; 39
 25e:	84 b5       	in	r24, 0x24	; 36
 260:	83 60       	ori	r24, 0x03	; 3
 262:	84 bd       	out	0x24, r24	; 36
 264:	85 b5       	in	r24, 0x25	; 37
 266:	88 60       	ori	r24, 0x08	; 8
 268:	85 bd       	out	0x25, r24	; 37
 26a:	47 bd       	out	0x27, r20	; 39
 26c:	16 bc       	out	0x26, r1	; 38
 26e:	85 b5       	in	r24, 0x25	; 37
 270:	67 70       	andi	r22, 0x07	; 7
 272:	68 2b       	or	r22, r24
 274:	65 bd       	out	0x25, r22	; 37
 276:	08 95       	ret

00000278 <Timer0__vEnableInterrupt>:
 278:	87 70       	andi	r24, 0x07	; 7
 27a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 27e:	08 95       	ret

00000280 <Timer0__vClearInterrupt>:
}
void Timer0__vClearInterrupt(Timer0_nInterrupt enInterrupt)
{
	TIFR0&=~ ((uint8_t)enInterrupt&0x07);
 280:	95 b3       	in	r25, 0x15	; 21
 282:	87 70       	andi	r24, 0x07	; 7
 284:	80 95       	com	r24
 286:	98 23       	and	r25, r24
 288:	95 bb       	out	0x15, r25	; 21
 28a:	08 95       	ret

0000028c <OS__u8StartCriticalSection>:
{
	uint8_t u8Status;
	u8Status = OS__u8StartCriticalSection();
	*ps8Semaphore = (*ps8Semaphore) + 1;
	OS__vEndCriticalSection(u8Status);
}
 28c:	8f b7       	in	r24, 0x3f	; 63
 28e:	f8 94       	cli
 290:	80 78       	andi	r24, 0x80	; 128
 292:	08 95       	ret

00000294 <OS__vEndCriticalSection>:
 294:	9f b7       	in	r25, 0x3f	; 63
 296:	89 2b       	or	r24, r25
 298:	8f bf       	out	0x3f, r24	; 63
 29a:	08 95       	ret

0000029c <OS_vSetInitialStack>:
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	fc 01       	movw	r30, r24
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	ee 0f       	add	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	e5 5e       	subi	r30, 0xE5	; 229
 2aa:	fa 4f       	sbci	r31, 0xFA	; 250
 2ac:	98 2f       	mov	r25, r24
 2ae:	88 27       	eor	r24, r24
 2b0:	9c 01       	movw	r18, r24
 2b2:	2f 50       	subi	r18, 0x0F	; 15
 2b4:	3e 4f       	sbci	r19, 0xFE	; 254
 2b6:	31 83       	std	Z+1, r19	; 0x01
 2b8:	20 83       	st	Z, r18
 2ba:	8b 5e       	subi	r24, 0xEB	; 235
 2bc:	9e 4f       	sbci	r25, 0xFE	; 254
 2be:	fc 01       	movw	r30, r24
 2c0:	e1 50       	subi	r30, 0x01	; 1
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	20 83       	st	Z, r18
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	22 e0       	ldi	r18, 0x02	; 2
 2cc:	20 83       	st	Z, r18
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	20 e8       	ldi	r18, 0x80	; 128
 2d2:	20 83       	st	Z, r18
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	20 83       	st	Z, r18
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	25 e0       	ldi	r18, 0x05	; 5
 2dc:	20 83       	st	Z, r18
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	26 e0       	ldi	r18, 0x06	; 6
 2e2:	20 83       	st	Z, r18
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	27 e0       	ldi	r18, 0x07	; 7
 2e8:	20 83       	st	Z, r18
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	28 e0       	ldi	r18, 0x08	; 8
 2ee:	20 83       	st	Z, r18
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	29 e0       	ldi	r18, 0x09	; 9
 2f4:	20 83       	st	Z, r18
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	20 e1       	ldi	r18, 0x10	; 16
 2fa:	20 83       	st	Z, r18
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	21 e1       	ldi	r18, 0x11	; 17
 300:	20 83       	st	Z, r18
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	22 e1       	ldi	r18, 0x12	; 18
 306:	20 83       	st	Z, r18
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	23 e1       	ldi	r18, 0x13	; 19
 30c:	20 83       	st	Z, r18
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	24 e1       	ldi	r18, 0x14	; 20
 312:	20 83       	st	Z, r18
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	25 e1       	ldi	r18, 0x15	; 21
 318:	20 83       	st	Z, r18
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	26 e1       	ldi	r18, 0x16	; 22
 31e:	20 83       	st	Z, r18
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	27 e1       	ldi	r18, 0x17	; 23
 324:	20 83       	st	Z, r18
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	28 e1       	ldi	r18, 0x18	; 24
 32a:	20 83       	st	Z, r18
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	29 e1       	ldi	r18, 0x19	; 25
 330:	20 83       	st	Z, r18
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	20 e2       	ldi	r18, 0x20	; 32
 336:	20 83       	st	Z, r18
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	21 e2       	ldi	r18, 0x21	; 33
 33c:	20 83       	st	Z, r18
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	22 e2       	ldi	r18, 0x22	; 34
 342:	20 83       	st	Z, r18
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	23 e2       	ldi	r18, 0x23	; 35
 348:	20 83       	st	Z, r18
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	24 e2       	ldi	r18, 0x24	; 36
 34e:	20 83       	st	Z, r18
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	25 e2       	ldi	r18, 0x25	; 37
 354:	20 83       	st	Z, r18
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	26 e2       	ldi	r18, 0x26	; 38
 35a:	20 83       	st	Z, r18
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	27 e2       	ldi	r18, 0x27	; 39
 360:	20 83       	st	Z, r18
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	28 e2       	ldi	r18, 0x28	; 40
 366:	20 83       	st	Z, r18
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	29 e2       	ldi	r18, 0x29	; 41
 36c:	20 83       	st	Z, r18
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	20 e3       	ldi	r18, 0x30	; 48
 372:	20 83       	st	Z, r18
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	21 e3       	ldi	r18, 0x31	; 49
 378:	20 83       	st	Z, r18
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	22 e3       	ldi	r18, 0x32	; 50
 37e:	20 83       	st	Z, r18
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	23 e3       	ldi	r18, 0x33	; 51
 384:	20 83       	st	Z, r18
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	24 e3       	ldi	r18, 0x34	; 52
 38a:	20 83       	st	Z, r18
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	25 e3       	ldi	r18, 0x35	; 53
 390:	20 83       	st	Z, r18
 392:	08 95       	ret

00000394 <OS__enAddPeriodicThreads>:
 394:	90 93 1a 05 	sts	0x051A, r25	; 0x80051a <OS_vPeriodicTask0+0x1>
 398:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <OS_vPeriodicTask0>
 39c:	50 93 18 05 	sts	0x0518, r21	; 0x800518 <OS_vPeriodicTask1+0x1>
 3a0:	40 93 17 05 	sts	0x0517, r20	; 0x800517 <OS_vPeriodicTask1>
 3a4:	61 15       	cp	r22, r1
 3a6:	71 05       	cpc	r23, r1
 3a8:	29 f0       	breq	.+10     	; 0x3b4 <OS__enAddPeriodicThreads+0x20>
 3aa:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <OS_u16PeriodTask0+0x1>
 3ae:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <OS_u16PeriodTask0>
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <OS__enAddPeriodicThreads+0x2c>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <OS_u16PeriodTask0+0x1>
 3bc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <OS_u16PeriodTask0>
 3c0:	21 15       	cp	r18, r1
 3c2:	31 05       	cpc	r19, r1
 3c4:	29 f0       	breq	.+10     	; 0x3d0 <OS__enAddPeriodicThreads+0x3c>
 3c6:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <OS_u16PeriodTask1+0x1>
 3ca:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <OS_u16PeriodTask1>
 3ce:	06 c0       	rjmp	.+12     	; 0x3dc <OS__enAddPeriodicThreads+0x48>
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <OS_u16PeriodTask1+0x1>
 3d8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <OS_u16PeriodTask1>
 3dc:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <OS_u16PeriodTask0>
 3e0:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <OS_u16PeriodTask0+0x1>
 3e4:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <OS_u16PeriodTask1>
 3e8:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <OS_u16PeriodTask1+0x1>
 3ec:	42 9f       	mul	r20, r18
 3ee:	c0 01       	movw	r24, r0
 3f0:	43 9f       	mul	r20, r19
 3f2:	90 0d       	add	r25, r0
 3f4:	52 9f       	mul	r21, r18
 3f6:	90 0d       	add	r25, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	a0 e0       	ldi	r26, 0x00	; 0
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <OS_u32MaxPeriod>
 402:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <OS_u32MaxPeriod+0x1>
 406:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <OS_u32MaxPeriod+0x2>
 40a:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <OS_u32MaxPeriod+0x3>
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	08 95       	ret

00000412 <OS__enAddMainThreads>:
 412:	9f 92       	push	r9
 414:	af 92       	push	r10
 416:	bf 92       	push	r11
 418:	cf 92       	push	r12
 41a:	df 92       	push	r13
 41c:	ef 92       	push	r14
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	98 2e       	mov	r9, r24
 42a:	a9 2e       	mov	r10, r25
 42c:	b6 2e       	mov	r11, r22
 42e:	c7 2e       	mov	r12, r23
 430:	d4 2e       	mov	r13, r20
 432:	e5 2e       	mov	r14, r21
 434:	f2 2e       	mov	r15, r18
 436:	03 2f       	mov	r16, r19
 438:	0e 94 46 01 	call	0x28c	; 0x28c <OS__u8StartCriticalSection>
 43c:	18 2f       	mov	r17, r24
 43e:	cb e1       	ldi	r28, 0x1B	; 27
 440:	d5 e0       	ldi	r29, 0x05	; 5
 442:	8f e1       	ldi	r24, 0x1F	; 31
 444:	95 e0       	ldi	r25, 0x05	; 5
 446:	9b 83       	std	Y+3, r25	; 0x03
 448:	8a 83       	std	Y+2, r24	; 0x02
 44a:	83 e2       	ldi	r24, 0x23	; 35
 44c:	95 e0       	ldi	r25, 0x05	; 5
 44e:	9f 83       	std	Y+7, r25	; 0x07
 450:	8e 83       	std	Y+6, r24	; 0x06
 452:	87 e2       	ldi	r24, 0x27	; 39
 454:	95 e0       	ldi	r25, 0x05	; 5
 456:	9b 87       	std	Y+11, r25	; 0x0b
 458:	8a 87       	std	Y+10, r24	; 0x0a
 45a:	df 87       	std	Y+15, r29	; 0x0f
 45c:	ce 87       	std	Y+14, r28	; 0x0e
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 4e 01 	call	0x29c	; 0x29c <OS_vSetInitialStack>
 464:	90 92 14 02 	sts	0x0214, r9	; 0x800214 <OS_ps8Stacks+0xff>
 468:	a0 92 13 02 	sts	0x0213, r10	; 0x800213 <OS_ps8Stacks+0xfe>
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 4e 01 	call	0x29c	; 0x29c <OS_vSetInitialStack>
 472:	b0 92 14 03 	sts	0x0314, r11	; 0x800314 <OS_ps8Stacks+0x1ff>
 476:	c0 92 13 03 	sts	0x0313, r12	; 0x800313 <OS_ps8Stacks+0x1fe>
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	0e 94 4e 01 	call	0x29c	; 0x29c <OS_vSetInitialStack>
 480:	d0 92 14 04 	sts	0x0414, r13	; 0x800414 <OS_ps8Stacks+0x2ff>
 484:	e0 92 13 04 	sts	0x0413, r14	; 0x800413 <OS_ps8Stacks+0x2fe>
 488:	83 e0       	ldi	r24, 0x03	; 3
 48a:	0e 94 4e 01 	call	0x29c	; 0x29c <OS_vSetInitialStack>
 48e:	f0 92 14 05 	sts	0x0514, r15	; 0x800514 <OS_ps8Stacks+0x3ff>
 492:	00 93 13 05 	sts	0x0513, r16	; 0x800513 <OS_ps8Stacks+0x3fe>
 496:	d0 93 16 05 	sts	0x0516, r29	; 0x800516 <OS_psRunPt+0x1>
 49a:	c0 93 15 05 	sts	0x0515, r28	; 0x800515 <OS_psRunPt>
 49e:	81 2f       	mov	r24, r17
 4a0:	0e 94 4a 01 	call	0x294	; 0x294 <OS__vEndCriticalSection>
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	bf 90       	pop	r11
 4b8:	af 90       	pop	r10
 4ba:	9f 90       	pop	r9
 4bc:	08 95       	ret

000004be <OS_vScheduler>:
 4be:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <u32Count.1786>
 4c2:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <u32Count.1786+0x1>
 4c6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <u32Count.1786+0x2>
 4ca:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <u32Count.1786+0x3>
 4ce:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <OS_u32MaxPeriod>
 4d2:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <OS_u32MaxPeriod+0x1>
 4d6:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <OS_u32MaxPeriod+0x2>
 4da:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <OS_u32MaxPeriod+0x3>
 4de:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__udivmodsi4>
 4e2:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <u32Count.1786>
 4e6:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <u32Count.1786+0x1>
 4ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <u32Count.1786+0x2>
 4ee:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <u32Count.1786+0x3>
 4f2:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <OS_u16PeriodTask0>
 4f6:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <OS_u16PeriodTask0+0x1>
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__udivmodsi4>
 502:	67 2b       	or	r22, r23
 504:	68 2b       	or	r22, r24
 506:	69 2b       	or	r22, r25
 508:	29 f4       	brne	.+10     	; 0x514 <OS_vScheduler+0x56>
 50a:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <OS_vPeriodicTask0>
 50e:	f0 91 1a 05 	lds	r31, 0x051A	; 0x80051a <OS_vPeriodicTask0+0x1>
 512:	09 95       	icall
 514:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <OS_u16PeriodTask1>
 518:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <OS_u16PeriodTask1+0x1>
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <u32Count.1786>
 524:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <u32Count.1786+0x1>
 528:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <u32Count.1786+0x2>
 52c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <u32Count.1786+0x3>
 530:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__udivmodsi4>
 534:	67 2b       	or	r22, r23
 536:	68 2b       	or	r22, r24
 538:	69 2b       	or	r22, r25
 53a:	29 f4       	brne	.+10     	; 0x546 <OS_vScheduler+0x88>
 53c:	e0 91 17 05 	lds	r30, 0x0517	; 0x800517 <OS_vPeriodicTask1>
 540:	f0 91 18 05 	lds	r31, 0x0518	; 0x800518 <OS_vPeriodicTask1+0x1>
 544:	09 95       	icall
 546:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <u32Count.1786>
 54a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <u32Count.1786+0x1>
 54e:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <u32Count.1786+0x2>
 552:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <u32Count.1786+0x3>
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	a1 1d       	adc	r26, r1
 55a:	b1 1d       	adc	r27, r1
 55c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <u32Count.1786>
 560:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <u32Count.1786+0x1>
 564:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <u32Count.1786+0x2>
 568:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <u32Count.1786+0x3>
 56c:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <OS_psRunPt>
 570:	f0 91 16 05 	lds	r31, 0x0516	; 0x800516 <OS_psRunPt+0x1>
 574:	82 81       	ldd	r24, Z+2	; 0x02
 576:	93 81       	ldd	r25, Z+3	; 0x03
 578:	90 93 16 05 	sts	0x0516, r25	; 0x800516 <OS_psRunPt+0x1>
 57c:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <OS_psRunPt>
 580:	08 95       	ret

00000582 <OS_vStartOS>:
	OS_vStartOS();                   // start on the first task
}

void OS_vStartOS(void)
{
	asm volatile (
 582:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <OS_psRunPt>
 586:	f0 91 16 05 	lds	r31, 0x0516	; 0x800516 <OS_psRunPt+0x1>
 58a:	01 90       	ld	r0, Z+
 58c:	10 80       	ld	r1, Z
 58e:	0d be       	out	0x3d, r0	; 61
 590:	1e be       	out	0x3e, r1	; 62
 592:	0f 90       	pop	r0
 594:	1f 90       	pop	r1
 596:	2f 90       	pop	r2
 598:	3f 90       	pop	r3
 59a:	4f 90       	pop	r4
 59c:	5f 90       	pop	r5
 59e:	6f 90       	pop	r6
 5a0:	7f 90       	pop	r7
 5a2:	8f 90       	pop	r8
 5a4:	9f 90       	pop	r9
 5a6:	af 90       	pop	r10
 5a8:	bf 90       	pop	r11
 5aa:	cf 90       	pop	r12
 5ac:	df 90       	pop	r13
 5ae:	ef 90       	pop	r14
 5b0:	ff 90       	pop	r15
 5b2:	0f 91       	pop	r16
 5b4:	1f 91       	pop	r17
 5b6:	2f 91       	pop	r18
 5b8:	3f 91       	pop	r19
 5ba:	4f 91       	pop	r20
 5bc:	5f 91       	pop	r21
 5be:	6f 91       	pop	r22
 5c0:	7f 91       	pop	r23
 5c2:	8f 91       	pop	r24
 5c4:	9f 91       	pop	r25
 5c6:	af 91       	pop	r26
 5c8:	bf 91       	pop	r27
 5ca:	cf 91       	pop	r28
 5cc:	df 91       	pop	r29
 5ce:	ef 91       	pop	r30
 5d0:	ff 91       	pop	r31
 5d2:	ff bf       	out	0x3f, r31	; 63
 5d4:	ff 91       	pop	r31
 5d6:	08 95       	ret

000005d8 <OS__vLaunch>:


void OS__vLaunch(void){

	/*Clear pending Interrupt of Timer Overflow*/
	Timer0__vClearInterrupt(Timer0_enInterruptOCIEA);
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	0e 94 40 01 	call	0x280	; 0x280 <Timer0__vClearInterrupt>
	/*Enable Interrupt of Timer Overflow*/
	Timer0__vEnableInterrupt(Timer0_enInterruptOCIEA);
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	0e 94 3c 01 	call	0x278	; 0x278 <Timer0__vEnableInterrupt>
	
	/*Intialization of Timer: Normal Mode MAX and CLK div64 ~~ 1ms*/
	Timer0__vInit(Timer0_enModeNormal_OCRA,Timer0_enClockDiv64,251);
 5e4:	4b ef       	ldi	r20, 0xFB	; 251
 5e6:	63 e0       	ldi	r22, 0x03	; 3
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	0e 94 05 01 	call	0x20a	; 0x20a <Timer0__vInit>

	OS_vStartOS();                   // start on the first task
 5ee:	0e 94 c1 02 	call	0x582	; 0x582 <OS_vStartOS>
 5f2:	08 95       	ret

000005f4 <__vector_14>:


// Task switching, ISR_NAKED is necessary to prevent compiler to manipulate the stack
ISR(TIMER0_COMPA_vect, ISR_NAKED) //1) Saves PC
{
	asm volatile (
 5f4:	ff 93       	push	r31
 5f6:	ff b7       	in	r31, 0x3f	; 63
 5f8:	ff 93       	push	r31
 5fa:	ef 93       	push	r30
 5fc:	df 93       	push	r29
 5fe:	cf 93       	push	r28
 600:	bf 93       	push	r27
 602:	af 93       	push	r26
 604:	9f 93       	push	r25
 606:	8f 93       	push	r24
 608:	7f 93       	push	r23
 60a:	6f 93       	push	r22
 60c:	5f 93       	push	r21
 60e:	4f 93       	push	r20
 610:	3f 93       	push	r19
 612:	2f 93       	push	r18
 614:	1f 93       	push	r17
 616:	0f 93       	push	r16
 618:	ff 92       	push	r15
 61a:	ef 92       	push	r14
 61c:	df 92       	push	r13
 61e:	cf 92       	push	r12
 620:	bf 92       	push	r11
 622:	af 92       	push	r10
 624:	9f 92       	push	r9
 626:	8f 92       	push	r8
 628:	7f 92       	push	r7
 62a:	6f 92       	push	r6
 62c:	5f 92       	push	r5
 62e:	4f 92       	push	r4
 630:	3f 92       	push	r3
 632:	2f 92       	push	r2
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0d b6       	in	r0, 0x3d	; 61
 63a:	1e b6       	in	r1, 0x3e	; 62
 63c:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <OS_psRunPt>
 640:	f0 91 16 05 	lds	r31, 0x0516	; 0x800516 <OS_psRunPt+0x1>
 644:	01 92       	st	Z+, r0
 646:	10 82       	st	Z, r1
 648:	0e 94 5f 02 	call	0x4be	; 0x4be <OS_vScheduler>
 64c:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <OS_psRunPt>
 650:	f0 91 16 05 	lds	r31, 0x0516	; 0x800516 <OS_psRunPt+0x1>
 654:	01 90       	ld	r0, Z+
 656:	10 80       	ld	r1, Z
 658:	0d be       	out	0x3d, r0	; 61
 65a:	1e be       	out	0x3e, r1	; 62
 65c:	0f 90       	pop	r0
 65e:	1f 90       	pop	r1
 660:	2f 90       	pop	r2
 662:	3f 90       	pop	r3
 664:	4f 90       	pop	r4
 666:	5f 90       	pop	r5
 668:	6f 90       	pop	r6
 66a:	7f 90       	pop	r7
 66c:	8f 90       	pop	r8
 66e:	9f 90       	pop	r9
 670:	af 90       	pop	r10
 672:	bf 90       	pop	r11
 674:	cf 90       	pop	r12
 676:	df 90       	pop	r13
 678:	ef 90       	pop	r14
 67a:	ff 90       	pop	r15
 67c:	0f 91       	pop	r16
 67e:	1f 91       	pop	r17
 680:	2f 91       	pop	r18
 682:	3f 91       	pop	r19
 684:	4f 91       	pop	r20
 686:	5f 91       	pop	r21
 688:	6f 91       	pop	r22
 68a:	7f 91       	pop	r23
 68c:	8f 91       	pop	r24
 68e:	9f 91       	pop	r25
 690:	af 91       	pop	r26
 692:	bf 91       	pop	r27
 694:	cf 91       	pop	r28
 696:	df 91       	pop	r29
 698:	ef 91       	pop	r30
 69a:	ff 91       	pop	r31
 69c:	ff bf       	out	0x3f, r31	; 63
 69e:	ff 91       	pop	r31
 6a0:	18 95       	reti

000006a2 <__udivmodsi4>:
 6a2:	a1 e2       	ldi	r26, 0x21	; 33
 6a4:	1a 2e       	mov	r1, r26
 6a6:	aa 1b       	sub	r26, r26
 6a8:	bb 1b       	sub	r27, r27
 6aa:	fd 01       	movw	r30, r26
 6ac:	0d c0       	rjmp	.+26     	; 0x6c8 <__udivmodsi4_ep>

000006ae <__udivmodsi4_loop>:
 6ae:	aa 1f       	adc	r26, r26
 6b0:	bb 1f       	adc	r27, r27
 6b2:	ee 1f       	adc	r30, r30
 6b4:	ff 1f       	adc	r31, r31
 6b6:	a2 17       	cp	r26, r18
 6b8:	b3 07       	cpc	r27, r19
 6ba:	e4 07       	cpc	r30, r20
 6bc:	f5 07       	cpc	r31, r21
 6be:	20 f0       	brcs	.+8      	; 0x6c8 <__udivmodsi4_ep>
 6c0:	a2 1b       	sub	r26, r18
 6c2:	b3 0b       	sbc	r27, r19
 6c4:	e4 0b       	sbc	r30, r20
 6c6:	f5 0b       	sbc	r31, r21

000006c8 <__udivmodsi4_ep>:
 6c8:	66 1f       	adc	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	88 1f       	adc	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	1a 94       	dec	r1
 6d2:	69 f7       	brne	.-38     	; 0x6ae <__udivmodsi4_loop>
 6d4:	60 95       	com	r22
 6d6:	70 95       	com	r23
 6d8:	80 95       	com	r24
 6da:	90 95       	com	r25
 6dc:	9b 01       	movw	r18, r22
 6de:	ac 01       	movw	r20, r24
 6e0:	bd 01       	movw	r22, r26
 6e2:	cf 01       	movw	r24, r30
 6e4:	08 95       	ret

000006e6 <_exit>:
 6e6:	f8 94       	cli

000006e8 <__stop_program>:
 6e8:	ff cf       	rjmp	.-2      	; 0x6e8 <__stop_program>
