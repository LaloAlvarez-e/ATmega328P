
FirstValue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .vec          00000064  00000200  00000200  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000000d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000004  00800100  00800100  000001d0  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000818  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000071a  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002ab  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000054  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003d1  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000004e  00000000  00000000  00001885  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  000018d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  88:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <IntDefaultHandler>:
	{0x0C94U,
	&IntDefaultHandler},                /* The SPM_Ready handler*/
};

void IntDefaultHandler(void)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	ff cf       	rjmp	.-2      	; 0x9a <IntDefaultHandler+0xa>

0000009c <main>:
#include <ATmega328P_startup.h>
interrupt_vector stVector = {0U};

int main(void)
{
	uint8_t u8Count = 0U;
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <main+0x6>
    {
		stVector.interrupt_instruction = _vectab[u8Count].interrupt_instruction;
		stVector.interrupt_handler = _vectab[u8Count].interrupt_handler;
		u8Count++;
		if(u8Count > 25U)
			u8Count = 0U;
  a0:	80 e0       	ldi	r24, 0x00	; 0
{
	uint8_t u8Count = 0U;
    /* Replace with your application code */
    while (1) 
    {
		stVector.interrupt_instruction = _vectab[u8Count].interrupt_instruction;
  a2:	e8 2f       	mov	r30, r24
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	ee 0f       	add	r30, r30
  a8:	ff 1f       	adc	r31, r31
  aa:	ee 0f       	add	r30, r30
  ac:	ff 1f       	adc	r31, r31
  ae:	e0 50       	subi	r30, 0x00	; 0
  b0:	fe 4f       	sbci	r31, 0xFE	; 254
  b2:	20 81       	ld	r18, Z
  b4:	31 81       	ldd	r19, Z+1	; 0x01
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	11 96       	adiw	r26, 0x01	; 1
  bc:	3c 93       	st	X, r19
  be:	2e 93       	st	-X, r18
		stVector.interrupt_handler = _vectab[u8Count].interrupt_handler;
  c0:	22 81       	ldd	r18, Z+2	; 0x02
  c2:	33 81       	ldd	r19, Z+3	; 0x03
  c4:	13 96       	adiw	r26, 0x03	; 3
  c6:	3c 93       	st	X, r19
  c8:	2e 93       	st	-X, r18
  ca:	12 97       	sbiw	r26, 0x02	; 2
		u8Count++;
  cc:	8f 5f       	subi	r24, 0xFF	; 255
		if(u8Count > 25U)
  ce:	8a 31       	cpi	r24, 0x1A	; 26
  d0:	38 f7       	brcc	.-50     	; 0xa0 <main+0x4>
  d2:	e7 cf       	rjmp	.-50     	; 0xa2 <main+0x6>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
